{"version":3,"sources":["assets/cross.svg","assets/addBtn.svg","serviceWorker.js","components/Card/index.js","stores/ColumnsStore.js","components/Column/index.js","components/KanbanBoard/index.js","Utils/reorderCards.js","components/AddItem/index.js","components/ColumnDroppable/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","draggableId","this","props","colIndex","index","provided","snapshot","className","draggableProps","dragHandleProps","ref","innerRef","children","React","Component","observable","title","cards","action","text","columns","push","name","cardIndex","confirm","splice","Column","observer","onClick","ColumnsStore","deleteColumn","src","cross","alt","droppableProps","map","key","deleteCard","placeholder","KanbanBoard","onDragEnd","result","destination","source","droppableId","sourceColIndex","parseInt","replace","destColIndex","console","log","column","card","newCards","Array","from","reorderCards","AddItem","state","addItem","cardText","wrapper","createRef","myRef","onCLickOutsideHandler","e","current","contains","target","onClickCrossHandler","setState","onClickAddHandler","focus","onChangeTextArea","currentTarget","value","document","addEventListener","removeEventListener","empty","rows","onChange","addColumn","addCard","add","ColumnDroppable","App","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5c461d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.5fe0db66.svg\";","module.exports = __webpack_public_path__ + \"static/media/addBtn.6cb6e5fc.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport \"./Card.css\";\r\n// import { reaction } from 'mobx';\r\n\r\nexport default class Card extends React.Component {\r\n    render() {\r\n        return (\r\n            <Draggable draggableId={`${this.props.colIndex}${this.props.index}`} index={this.props.index}>\r\n                {(provided, snapshot) => (\r\n                    <div \r\n                        className=\"card\" \r\n                        {...provided.draggableProps} \r\n                        {...provided.dragHandleProps} \r\n                        ref={provided.innerRef} \r\n                     >\r\n                        {this.props.children}\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        )\r\n    }\r\n}","import { observable, action } from \"mobx\";\r\n\r\n\r\nclass ColumnsStore {\r\n\r\n    @observable\r\n    columns = [\r\n        {\r\n            title: \"План на месяц\",\r\n            cards: [\r\n                \"1\",\r\n                \"3\",\r\n                \"1\",\r\n                \"2\",\r\n                \"3\",\r\n            ]\r\n        },\r\n        {\r\n            title: \"План на год\",\r\n            cards: [\r\n                \"15\",\r\n                \"20\",\r\n                \"30\"\r\n            ]\r\n        }\r\n    ];\r\n\r\n    @action\r\n    addCard = (text, colIndex) => {\r\n        if (text === '')\r\n            return;\r\n        this.columns[colIndex].cards.push(text);\r\n    }\r\n\r\n    @action\r\n    addColumn = (name) => {\r\n        this.columns.push({title: name, cards: []});\r\n    }\r\n\r\n    @action\r\n    deleteCard = (colIndex, cardIndex) => {\r\n        if (window.confirm(\"Удалить карточку?\"))\r\n            this.columns[colIndex].cards.splice(cardIndex, 1);\r\n        \r\n    }\r\n\r\n    @action\r\n    deleteColumn = (colIndex) => {\r\n        if (window.confirm(\"Удалить колонку?\"))\r\n            this.columns.splice(colIndex, 1);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new ColumnsStore(); ","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Card, AddItem } from \"../index\";\r\nimport ColumnsStore from '../../stores/ColumnsStore';\r\nimport cross from '../../assets/cross.svg'\r\n\r\nimport \"./Column.css\";\r\n\r\n@observer\r\nclass Column extends React.Component {\r\n\r\n    render() {\r\n        const provided = this.props.provided;\r\n        const colIndex = this.props.colIndex;\r\n        return (\r\n            <div className=\"column\"> \r\n                    <div className=\"column-title\">\r\n                        <span>{this.props.title}</span>\r\n                        <div className=\"delete-column\" onClick={() => ColumnsStore.deleteColumn(colIndex)} >\r\n                            <img src={cross} alt=\"Удалить колонку\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column-items\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                        {this.props.cards.map((text, index) => \r\n                            <Card key={index} index={index} colIndex={colIndex}>\r\n                                {text}\r\n                                <div className=\"delete-card\" onClick={() => ColumnsStore.deleteCard(colIndex, index)} >\r\n                                    <img src={cross} alt=\"удалить карточку\" />\r\n                                </div>\r\n                            </Card>)\r\n                        }\r\n                        {provided.placeholder}\r\n                    </div>\r\n                    <AddItem index={this.props.index} />\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Column;","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { ColumnDroppable } from \"../index\";\r\nimport ColumnsStore from \"../../stores/ColumnsStore\";\r\nimport reorderCards from \"../../Utils/reorderCards\";\r\n\r\nimport \"./KanbanBoard.css\";\r\n\r\n@observer\r\nclass KanbanBoard extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"kanban-board\">\r\n                <DragDropContext onDragEnd={result => reorderCards(result, ColumnsStore)}>    \r\n                    {ColumnsStore.columns.map((column, index) => <ColumnDroppable key={index} index={index} {...column} />)}\r\n                    <ColumnDroppable />\r\n                </DragDropContext>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  KanbanBoard;","export default function(result, ColumnsStore) {\r\n    const { destination, source } = result;\r\n\r\n    if (!destination)\r\n        return;\r\n\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index)\r\n        return;\r\n\r\n    const sourceColIndex = parseInt(source.droppableId.replace('col', ''));\r\n    const destColIndex = parseInt(destination.droppableId.replace('col', ''));\r\n\r\n    console.log(\"dest_drop_id\", destColIndex);\r\n    console.log(\"source_drop_id\", sourceColIndex);\r\n    console.log(\"dest_index\", destination.index);\r\n    console.log(\"source_index\", source.index);\r\n\r\n    ColumnsStore.columns = ColumnsStore.columns.map((column, colIndex) => {\r\n        if (destColIndex === colIndex) {\r\n            const card = ColumnsStore.columns[sourceColIndex].cards.splice(source.index, 1);\r\n            const newCards = Array.from(column.cards);\r\n            newCards.splice(destination.index, 0, card);\r\n            column.cards = newCards;\r\n        }\r\n        return column;\r\n    });\r\n}","import React, { createRef } from 'react';\r\nimport cross from \"../../assets/cross.svg\";\r\nimport add from \"../../assets/addBtn.svg\";\r\nimport ColumnsStore from \"../../stores/ColumnsStore\";\r\n\r\nimport \"./AddItem.css\";\r\n\r\nexport default class AddItem extends React.Component {\r\n\r\n    state = {\r\n        addItem: false,\r\n        cardText: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.onCLickOutsideHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.onCLickOutsideHandler);\r\n    }\r\n\r\n    wrapper = createRef();\r\n    myRef = createRef();\r\n\r\n    onCLickOutsideHandler = (e) => {\r\n        if (this.wrapper.current && !this.wrapper.current.contains(e.target)) {\r\n            console.log(this.wrapper, this.wrapper.current);\r\n            this.onClickCrossHandler();\r\n            console.log(e.target);\r\n        }\r\n    }\r\n\r\n    onClickCrossHandler = () => {\r\n        this.setState({addItem: false, cardText: ''});\r\n    }\r\n\r\n    onClickAddHandler = () => {\r\n        this.setState({addItem: true}, () => { this.myRef.current.focus() });\r\n    }\r\n\r\n    onChangeTextArea = (e) => {\r\n        this.setState({cardText: e.currentTarget.value});\r\n    }\r\n    \r\n    render() {\r\n        const empty = this.props.empty;\r\n        const text = this.state.cardText;\r\n        const index = this.props.index;\r\n        return this.state.addItem ? (\r\n            <div ref={this.wrapper} className={empty ? \"add-item empty\" : \"add-item\"} >\r\n                <div className=\"text-area\">\r\n                    <textarea\r\n                        rows=\"2\" \r\n                        placeholder={empty ? \"Введите название колонки\" : \"Введите название карточки\"} \r\n                        onChange={this.onChangeTextArea} \r\n                        value={this.state.cardText} \r\n                        ref={this.myRef}\r\n                    />\r\n                </div>\r\n                <div className=\"add-item__bottom\">\r\n                    <button \r\n                        onClick={\r\n                            empty ? \r\n                            () => {ColumnsStore.addColumn(text); this.onClickCrossHandler()} : \r\n                            () => {ColumnsStore.addCard(text, index); this.onClickCrossHandler()}\r\n                        }\r\n                    >\r\n                        {empty ? \"Добавить колонку\" : \"Добавить карточку\"}\r\n                    </button>\r\n                    <img src={cross} onClick={this.onClickCrossHandler} alt=\"close form\" />\r\n                </div>\r\n            </div> \r\n        ) : (\r\n            <div className=\"column__bottom\" onClick={this.onClickAddHandler}>\r\n                <img src={add} alt=\"add item\" />\r\n                <span>{empty ? \"Добавить еще одну колонку\" : \"Добавить еще одну карточку\"}</span>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n} ","import React from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport { AddItem, Column } from \"../index\";\r\n\r\nclass ColumnDroppable extends React.Component {\r\n\r\n    render() {\r\n        const colIndex = this.props.index;\r\n        return this.props.cards ? (\r\n            <Droppable droppableId={`col${colIndex}`}>\r\n            {provided => (\r\n                <Column colIndex={colIndex} provided={provided} cards={this.props.cards} title={this.props.title} index={this.props.index} />\r\n            )}\r\n            </Droppable>\r\n        ) : (\r\n            <div className=\"column\">\r\n                <AddItem empty />\r\n            </div> \r\n        )     \r\n    }\r\n}\r\n\r\nexport default ColumnDroppable;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { KanbanBoard } from \"./components/index\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <KanbanBoard />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}